name: CI/CD Pipeline with Testing and Scanning

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        cd webApp
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run unit tests (pytest)
      run: |
        cd webApp
        pytest

    - name: Build Docker image
      run: |
        cd webApp
        docker build -t flask-webapp .

    - name: Tag Docker image for Docker Hub
      run: |
        docker tag flask-webapp ${{ secrets.DOCKER_USERNAME }}/flask-webapp:latest

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/flask-webapp:latest

  scan:
    runs-on: ubuntu-latest
    needs: build-test  

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Semgrep and Bandit
      run: |
        pip install semgrep bandit

    - name: Run Semgrep
      run: |
        semgrep --config p/default webApp || true

    - name: Run Bandit (Python security linter)
      run: |
        bandit -r webApp -lll --exit-zero

  post-deployment-pentesting:
    runs-on: ubuntu-latest
    needs: build-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Docker dependencies and build image
      run: |
        cd webApp
        docker build -t flask-webapp .

    - name: Run Flask app container locally
      run: |
        docker run -d -p 5000:5000 --name pentest-target flask-webapp
        sleep 10  # give app time to start

    - name: Install Nuclei (latest release)
      run: |
        URL=$(curl -s https://api.github.com/repos/projectdiscovery/nuclei/releases/latest | grep "browser_download_url.*linux_amd64.zip" | cut -d '"' -f 4)
        wget "$URL" -O nuclei.zip
        unzip -o nuclei.zip
        chmod +x nuclei
        sudo mv nuclei /usr/local/bin/
        nuclei -version

    - name: Run Nuclei scan
      run: |
        mkdir -p scan-reports
        nuclei -u http://localhost:5000 -severity critical,high,medium -o scan-reports/nuclei.txt || true

    - name: Pull OWASP ZAP Docker image explicitly
      run: |
        docker pull ghcr.io/zaproxy/zaproxy:stable

    - name: Prepare ZAP report directory
      run: |
        mkdir -p zap-reports
        chmod 777 zap-reports

    - name: Run OWASP ZAP API Scan (Active + Passive)
      run: |
        docker run -v $(pwd)/zap-reports:/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable zap-api-scan.py \
          -t http://host.docker.internal:5000/openapi.json \
          -f openapi \
          -d \
          -a \
          -r zap-api-report.html || true

    - name: Show ZAP API Scan Report
      run: |
        echo "===== ZAP API SCAN REPORT ====="
        cat zap-api-report.html || echo "Report not found"

    - name: Run OWASP ZAP Full Scan (Crawl + Attack)
      run: |
        docker run -v $(pwd)/zap-reports:/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable zap-full-scan.py \
          -t http://host.docker.internal:5000 \
          -r zap-full-report.html || true

    - name: Show ZAP Full Scan Report
      run: |
        echo "===== ZAP FULL SCAN REPORT ====="
        cat zap-full-report.html || echo "Report not found"


    - name: Stop and clean up Docker container
      if: always()
      run: |
        docker stop pentest-target
        docker rm pentest-target
