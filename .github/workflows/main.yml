name: CI/CD Pipeline with Testing and Scanning

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        cd webApp
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run unit tests (pytest)
      run: |
        cd webApp
        pytest

    # - name: Build and tag Docker image
    #   run: |
    #     cd webApp
    #     docker build -t ${{ secrets.DOCKER_USERNAME }}/flask-webapp:latest .

  Static-Code-Analysis:
    runs-on: ubuntu-latest
    needs: build-test  

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Semgrep and Bandit
      run: |
        pip install semgrep bandit

    - name: Run Semgrep (JSON report)
      run: |
        semgrep --config p/default webApp --json > scan-reports/semgrep.json || true

    - name: Run Bandit (JSON report)
      run: |
        bandit -r webApp -f json -o scan-reports/bandit.json || true

  post-deployment-pentesting:
    runs-on: ubuntu-latest
    needs: build-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Docker dependencies and build image
      run: |
        cd webApp
        docker build -t flask-webapp .

    - name: Create Docker network
      run: docker network create zapnet

    - name: Run Flask app container
      run: |
        docker run --network zapnet -d --name pentest-target flask-webapp
        sleep 10

    - name: Confirm Flask app is reachable inside zapnet
      run: |
        docker run --rm --network zapnet curlimages/curl curl -s http://pentest-target:5000 || (echo "App not reachable!" && exit 1)

    - name: Install SecLists Wordlist
      run: |
        mkdir -p ${{ github.workspace }}/wordlists
        curl -sSL https://raw.githubusercontent.com/danielmiessler/SecLists/refs/heads/master/Discovery/Web-Content/directory-list-2.3-small.txt -o ${{ github.workspace }}/wordlists/fuzzlist.txt

    - name: Run directory fuzzing with ffuf (Docker)
      run: |
        docker run --rm --network zapnet \
        -v ${{ github.workspace }}/wordlists:/wordlists \
        -v ${{ github.workspace }}/scan-reports:/ffuf/output \
        secsi/ffuf \
        -u http://pentest-target:5000/FUZZ \
        -w /wordlists/fuzzlist.txt \
        -mc 200,302 \
        -s \
        -o /ffuf/output/ffuf.json \
        -of json || true

    - name: Extract paths from ffuf output
      run: |
        sudo chmod -R 777 scan-reports
        jq -r '.results[].input | "http://pentest-target:5000" + .FUZZ' scan-reports/ffuf.json > scan-reports/urls.txt

    - name: Run nuclei scan (in Docker)
      run: |
        docker run --rm --network zapnet \
          -v ${{ github.workspace }}/scan-reports:/output \
          projectdiscovery/nuclei:latest \
          -l /output/urls.txt \
          -severity critical,high,medium,low,info \
          -o /output/nuclei.txt || true

    - name: Prepare ZAP report directory
      run: |
        mkdir -p zap-reports
        sudo chmod -R 777 zap-reports

    - name: Run ZAP Full Scan (Crawl + Attack)
      run: |
        docker run --rm --network zapnet \
          -v ${{ github.workspace }}/zap-reports:/zap/wrk \
          -t ghcr.io/zaproxy/zaproxy:stable zap-full-scan.py \
          -t http://pentest-target:5000 \
          -J zap-full-report.json -r zap-full-report.html || true

    - name: Run ZAP API Scan
      run: |
        docker run --rm --network zapnet \
          -v ${{ github.workspace }}/zap-reports:/zap/wrk \
          -t ghcr.io/zaproxy/zaproxy:stable zap-api-scan.py \
          -t http://pentest-target:5000/openapi.json \
          -f openapi \
          -d \
          -a \
          -J zap-api-report.json -r zap-api-report.html || true

    - name: Evaluate scan results
      run: |
        echo "Evaluating vulnerabilities..."
        ZAP_API_CRIT=$(jq '[.site[0].alerts[] | select(.riskcode=="3")] | length' zap-reports/zap-api-report.json)
        ZAP_FULL_CRIT=$(jq '[.site[0].alerts[] | select(.riskcode=="3")] | length' zap-reports/zap-full-report.json)
        ZAP_CRIT=$((ZAP_API_CRIT + ZAP_FULL_CRIT))
        NUCLEI_CRIT=$(grep -ic 'critical' scan-reports/nuclei.txt || true)

        echo "ZAP critical: $ZAP_CRIT"
        echo "Nuclei critical: $NUCLEI_CRIT"

        if [ "$ZAP_CRIT" -gt 0 ] || [ "$NUCLEI_CRIT" -gt 0 ]; then
          echo "‚ùå Critical vulnerabilities found. Aborting push and deploy."
          exit 1
        fi
        echo "‚úÖ No critical vulnerabilities. Proceeding with deploy."

    - name: Stop and remove app container
      if: always()
      run: |
        docker stop pentest-target
        docker rm pentest-target

    - name: Remove Docker network
      if: always()
      run: docker network rm zapnet


  risk-evaluation:
    runs-on: ubuntu-latest
    needs: [Static-Code-Analysis, post-deployment-pentesting]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Evaluate combined scan results
      run: |
        echo "üîç Evaluating vulnerabilities using threshold and weighted models..."

        # Parse ZAP reports (API and Full)
        ZAP_API_CRIT=$(jq '[.site[0].alerts[] | select(.riskcode=="3")] | length' zap-reports/zap-api-report.json)
        ZAP_API_HIGH=$(jq '[.site[0].alerts[] | select(.riskcode=="2")] | length' zap-reports/zap-api-report.json)
        ZAP_API_MED=$(jq '[.site[0].alerts[] | select(.riskcode=="1")] | length' zap-reports/zap-api-report.json)
        ZAP_API_LOW=$(jq '[.site[0].alerts[] | select(.riskcode=="0")] | length' zap-reports/zap-api-report.json)

        ZAP_FULL_CRIT=$(jq '[.site[0].alerts[] | select(.riskcode=="3")] | length' zap-reports/zap-full-report.json)
        ZAP_FULL_HIGH=$(jq '[.site[0].alerts[] | select(.riskcode=="2")] | length' zap-reports/zap-full-report.json)
        ZAP_FULL_MED=$(jq '[.site[0].alerts[] | select(.riskcode=="1")] | length' zap-reports/zap-full-report.json)
        ZAP_FULL_LOW=$(jq '[.site[0].alerts[] | select(.riskcode=="0")] | length' zap-reports/zap-full-report.json)

        # Combine ZAP totals
        CRITICAL=$((ZAP_API_CRIT + ZAP_FULL_CRIT))
        HIGH=$((ZAP_API_HIGH + ZAP_FULL_HIGH))
        MEDIUM=$((ZAP_API_MED + ZAP_FULL_MED))
        LOW=$((ZAP_API_LOW + ZAP_FULL_LOW))

        # Add Nuclei results
        NUCLEI_CRITICAL=$(grep -ic 'severity.*critical' scan-reports/nuclei.txt || true)
        NUCLEI_HIGH=$(grep -ic 'severity.*high' scan-reports/nuclei.txt || true)
        NUCLEI_MEDIUM=$(grep -ic 'severity.*medium' scan-reports/nuclei.txt || true)
        NUCLEI_LOW=$(grep -ic 'severity.*low' scan-reports/nuclei.txt || true)

        CRITICAL=$((CRITICAL + NUCLEI_CRITICAL))
        HIGH=$((HIGH + NUCLEI_HIGH))
        MEDIUM=$((MEDIUM + NUCLEI_MEDIUM))
        LOW=$((LOW + NUCLEI_LOW))

        echo "Critical: $CRITICAL"
        echo "High: $HIGH"
        echo "Medium: $MEDIUM"
        echo "Low: $LOW"

        # Parse Bandit
        BANDIT_HIGH=$(jq '[.results[] | select(.issue_severity=="HIGH")] | length' scan-reports/bandit.json || echo 0)
        BANDIT_MEDIUM=$(jq '[.results[] | select(.issue_severity=="MEDIUM")] | length' scan-reports/bandit.json || echo 0)
        BANDIT_LOW=$(jq '[.results[] | select(.issue_severity=="LOW")] | length' scan-reports/bandit.json || echo 0)

        # Parse Semgrep
        SEMGREP_HIGH=$(jq '[.results[] | select(.severity=="ERROR")] | length' scan-reports/semgrep.json || echo 0)
        SEMGREP_MEDIUM=$(jq '[.results[] | select(.severity=="WARNING")] | length' scan-reports/semgrep.json || echo 0)
        SEMGREP_LOW=$(jq '[.results[] | select(.severity=="INFO")] | length' scan-reports/semgrep.json || echo 0)

        # Update risk counts
        CRITICAL=$((CRITICAL + 0)) # Static tools rarely report true "Critical"
        HIGH=$((HIGH + BANDIT_HIGH + SEMGREP_HIGH))
        MEDIUM=$((MEDIUM + BANDIT_MEDIUM + SEMGREP_MEDIUM))
        LOW=$((LOW + BANDIT_LOW + SEMGREP_LOW))

        # Threshold-Based Decision
        if [ "$CRITICAL" -gt 0 ]; then
          echo "‚ùå Deployment blocked: Critical vulnerabilities found."
          exit 1
        fi

        if [ "$HIGH" -gt 2 ]; then
          echo "‚ùå Deployment blocked: Too many High vulnerabilities."
          exit 1
        fi

        if [ "$MEDIUM" -gt 4 ]; then
          echo "‚ùå Deployment blocked: Too many Medium vulnerabilities."
          exit 1
        fi

        # Weighted Scoring
        SCORE=$((CRITICAL*5 + HIGH*3 + MEDIUM*2 + LOW*1))
        echo "Weighted Risk Score: $SCORE"

        if [ "$SCORE" -gt 10 ]; then
          echo "‚ùå Deployment blocked: Risk score exceeds acceptable threshold (10)."
          exit 1
        fi
        echo "::notice::Critical=$CRITICAL High=$HIGH Medium=$MEDIUM Low=$LOW RiskScore=$SCORE"
        echo "‚úÖ All risk evaluations passed. Safe to deploy."

  deploy-to-prod:
    runs-on: ubuntu-latest
    needs: risk-evaluation
    if: success()

    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull the evaluated image (optional, if needed)
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/flask-webapp:latest || true

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/flask-webapp:latest

      - name: Trigger Render Deployment
        run: |
          echo "üì¶ Deployment request sent to Render..."
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}