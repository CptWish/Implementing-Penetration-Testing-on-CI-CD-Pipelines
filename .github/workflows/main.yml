name: CI/CD Pipeline with Testing and Scanning

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        cd webApp
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run unit tests (pytest)
      run: |
        cd webApp
        pytest

    # - name: Build and tag Docker image
    #   run: |
    #     cd webApp
    #     docker build -t ${{ secrets.DOCKER_USERNAME }}/flask-webapp:latest .

  Static-Code-Analysis:
    runs-on: ubuntu-latest
    needs: build-test  

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Semgrep and Bandit
      run: |
        pip install semgrep bandit

    - name: Run Semgrep (JSON report)
      run: |
        mkdir -p scan-reports
        semgrep --config p/default webApp --json > scan-reports/semgrep.json || true
        cat scan-reports/semgrep.json

    - name: Upload Semgrep results as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: semgrep
        path: scan-reports/semgrep.json

    - name: Run Bandit (JSON report)
      run: |
        mkdir -p scan-reports
        bandit -r webApp -f json -o scan-reports/bandit.json || true
        cat scan-reports/bandit.json

    - name: Upload Bandit results as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: bandit
        path: scan-reports/bandit.json
  
  
  
  post-deployment-pentesting:
    runs-on: ubuntu-latest
    needs: build-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    # - name: Install Docker dependencies and build image
    #   run: |
    #     cd webApp
    #     docker build -t flask-webapp .

    # - name: Create Docker network
    #   run: docker network create zapnet

    # - name: Run Flask app container
    #   run: |
    #     docker run --network zapnet -d --name pentest-target flask-webapp
    #     sleep 10

    # - name: Confirm Flask app is reachable inside zapnet
    #   run: |
    #     docker run --rm --network zapnet curlimages/curl curl -s http://pentest-target:5000 || (echo "App not reachable!" && exit 1)

    # - name: Install SecLists Wordlist
    #   run: |
    #     mkdir -p ${{ github.workspace }}/wordlists
    #     curl -sSL https://raw.githubusercontent.com/danielmiessler/SecLists/refs/heads/master/Discovery/Web-Content/directory-list-2.3-small.txt -o ${{ github.workspace }}/wordlists/fuzzlist.txt
    
    # - name: Run directory fuzzing with ffuf (Docker)
    #   run: |
    #     docker run --rm --network zapnet \
    #     -v ${{ github.workspace }}/wordlists:/wordlists \
    #     -v ${{ github.workspace }}/scan-reports:/ffuf/output \
    #     secsi/ffuf \
    #     -u http://pentest-target:5000/FUZZ \
    #     -w /wordlists/fuzzlist.txt \
    #     -mc 200,302 \
    #     -s \
    #     -o /ffuf/output/ffuf.json \
    #     -of json || true

    # - name: Extract paths from ffuf output (cleaned)
    #   run: |
    #     sudo chmod -R 777 scan-reports
    #     echo "http://pentest-target:5000/" > scan-reports/urls.txt
    #     jq -r '.results[].input | "http://pentest-target:5000/" + .FUZZ' scan-reports/ffuf.json > scan-reports/urls_unmodified.txt
    #     sed -i '/#/d' scan-reports/urls_unmodified.txt
    #     sort scan-reports/urls_unmodified.txt | uniq > scan-reports/urls.txt
    #     cat scan-reports/urls.txt

    # - name: Run nuclei scan (in Docker)
    #   run: |
    #     mkdir -p scan-reports/nuclei-individual
    #     while IFS= read -r url; do
    #       echo " "
    #       echo " "
    #       echo "üîç Scanning $url with Nuclei..."
    #       docker run --rm --network zapnet \
    #         -v ${{ github.workspace }}/scan-reports:/output \
    #         projectdiscovery/nuclei:latest \
    #         -u "$url" \
    #         -severity critical,high,medium,low,info \
    #         -c 100 \
    #         -o "/output/nuclei-individual/$(echo $url | md5sum | cut -d' ' -f1).txt" || true
    #     done < scan-reports/urls.txt


    # - name: Merge Nuclei individual reports
    #   run: |
    #     mkdir -p scan-reports
    #     echo "üîó Merging Nuclei individual reports into scan-reports/nuclei.txt"
    #     cat scan-reports/nuclei-individual/*.txt > scan-reports/nuclei.txt || echo "No individual reports found."    

    # - name: Prepare ZAP report directory
    #   run: |
    #     mkdir -p zap-reports
    #     sudo chmod -R 777 zap-reports

    # - name: Run ZAP Full Scan (Crawl + Attack)
    #   run: |
    #     mkdir -p zap-reports/temp
    #     echo '{"site":[]}' > zap-reports/zap-full-report.json

    #     while IFS= read -r url; do
    #       echo "üîç Scanning $url with ZAP Full Scan..."
    #       HASH=$(echo $url | md5sum | cut -d' ' -f1)
    #       JSON_FILE="zap-full-report-$HASH.json"
    #       HTML_FILE="zap-full-report-$HASH.html"

    #       docker run --rm --network zapnet \
    #         -v ${{ github.workspace }}/zap-reports:/zap/wrk \
    #         -t ghcr.io/zaproxy/zaproxy:stable zap-full-scan.py \
    #         -t "$url" \
    #         -J "$JSON_FILE" \
    #         -r "$HTML_FILE" || true
    #     done < scan-reports/urls.txt
  
    # - name: Merge ZAP Full Scan reports
    #   run: |
    #     echo '{"site": []}' > zap-reports/zap-full-report.json
    #     for f in zap-reports/zap-full-report-*.json; do
    #       if [ -f "$f" ]; then
    #         jq -s '.[0].site + .[1].site | {site: .}' "$f" zap-reports/zap-full-report.json > zap-reports/tmp.json && mv zap-reports/tmp.json zap-reports/zap-full-report.json
    #       fi
    #     done


    # - name: Run ZAP API Scan
    #   run: |
    #     docker run --rm --network zapnet \
    #       -v ${{ github.workspace }}/zap-reports:/zap/wrk \
    #       -t ghcr.io/zaproxy/zaproxy:stable zap-api-scan.py \
    #       -t http://pentest-target:5000/openapi.json \
    #       -f openapi \
    #       -d \
    #       -a \
    #       -J zap-api-report.json -r zap-api-report.html || true

    # - name: Upload nuclei artifact
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: nuclei
    #     path: scan-reports/nuclei.txt

    # - name: Upload ZAP-full artifact
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: zap-full
    #     path: zap-reports/zap-full-report.json

    # - name: Upload ZAP-api artifact
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: zap-api
    #     path: zap-reports/zap-api-report.json  
    
    # - name: Run Nikto scans (install inside container per URL)
    #   run: |
    #     mkdir -p scan-reports/nikto-individual
    #     while IFS= read -r url; do
    #       echo "üîç Scanning $url with Nikto..."
    #       HASH=$(echo "$url" | md5sum | cut -d' ' -f1)

    #       docker run --rm --network zapnet \
    #         -v "${{ github.workspace }}/scan-reports:/results" \
    #         debian:bullseye-slim /bin/bash -c "\
    #           apt-get update && \
    #           apt-get install -y perl git libnet-ssleay-perl openssl libwhisker2-perl libnet-libidn-perl liburi-perl && \
    #           git clone https://github.com/sullo/nikto.git /nikto && \
    #           perl /nikto/program/nikto.pl -host '$url' -output '/results/nikto-individual/$HASH.txt'" || true
    #     done < scan-reports/urls.txt
        

    # - name: Merge Nikto individual reports
    #   run: |
    #     mkdir -p scan-reports
    #     echo "üîó Merging Nikto individual reports into scan-reports/nikto.txt"
    #     cat scan-reports/nikto-individual/*.txt > scan-reports/nikto.txt || echo "No Nikto reports found."
    #     cat scan-reports/nikto.txt
    
    # - name: Upload Nikto artifact
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: nikto
    #     path: scan-reports/nikto.txt

    # - name: Stop and remove app container
    #   if: always()
    #   run: |
    #     docker stop pentest-target
    #     docker rm pentest-target

    # - name: Remove Docker network
    #   if: always()
    #   run: docker network rm zapnet
    
  risk-evalutaion:
    runs-on: ubuntu-latest
    needs: [post-deployment-pentesting, Static-Code-Analysis]
    if: success()

    steps:
    - name: Download Semgrep SCA artifacts
      uses: actions/download-artifact@v4
      with:
        name: semgrep
        
    - name: Download Bandit SCA artifacts
      uses: actions/download-artifact@v4
      with:
        name: bandit

    # - name: Get ZAP full results from post-deployment-pentesting job
    #   uses: actions/download-artifact@v4
    #   with:
    #     name: zap-full

    # - name: Get ZAP API results from post-deployment-pentesting job
    #   uses: actions/download-artifact@v4
    #   with:
    #     name: zap-api

    # - name: Get Nuclei results from post-deployment-pentesting job
    #   uses: actions/download-artifact@v4
    #   with:
    #     name: nuclei

    # - name: Get Nikto results
    #   uses: actions/download-artifact@v4
    #   with:
    #     name: nikto

    - name: Move artifacts to scan-reports directory
      run: |
        mkdir scan-reports
        mv semgrep.json scan-reports/
        mv bandit.json scan-reports/
        # mv nuclei.txt scan-reports/
        # mkdir zap-reports
        # mv zap-api-report.json zap-reports/
        # mv zap-full-report.json zap-reports/
        # mv nikto.txt scan-reports/
        # touch scoreZapFull.txt
        # touch scoreZapAPI.txt


    - name: Evaluate vulnerabilities
      run: |
        #!/bin/bash
        score=0
        CRITICAL=0
        HIGH=0
        MEDIUM=0
        LOW=0

        map_confidence() {

          case "$1" in
            "0") echo "0.0" ;;
            "1") echo "0.5" ;;
            "2") echo "0.8" ;;
            "3") echo "1.0" ;;
            *) echo "0.0" ;;
          esac
        }

        # echo ""
        # echo "---------------------------------------"
        # echo "üìä Parsing ZAP Full Scan..."
        # jq -c '.site[].alerts[]' zap-reports/zap-full-report.json | {
        #   while read -r alert; do
        #     name=$(echo "$alert" | jq -r '.alert')
        #     riskcode=$(echo "$alert" | jq -r '.riskcode')
        #     confidence=$(echo "$alert" | jq -r '.confidence')
        #     url=$(echo "$alert" | jq -r '.instances[0].uri')
  
        #     echo "Alert: $name"
        #     echo "Risk: $riskcode"
        #     echo "Confidence: $confidence"
        #     echo "URL: $url"
  
        #     case "$riskcode" in
        #       3) sev=5; ((CRITICAL++)) ;;
        #       2) sev=3; ((HIGH++)) ;;
        #       1) sev=2; ((MEDIUM++)) ;;
        #       0) sev=1; ((LOW++)) ;;
        #       *) sev=0; ;;
        #     esac
  
        #     coef=$(map_confidence "$confidence")
        #     vuln_score=$(echo "$sev * $coef" | bc)
        #     score=$(echo "$score + $vuln_score" | bc)
  
        #     echo "- [ZAP Full] $name @ $url | severity=$sev confidence=$confidence -> $vuln_score"
  
        #     echo "----------------------"
        #   done
        #   echo "$score" > scoreZapFull.txt
        #   printf "Critical: $CRITICAL \n" >> zapFullList.txt
        #   printf "High: $HIGH \n" >> zapFullList.txt
        #   printf "Medium: $MEDIUM \n" >> zapFullList.txt
        #   printf "Low: $LOW \n" >> zapFullList.txt

        #   scoreZapFull=$(cat scoreZapFull.txt)
        #   score=$(echo "$score + $scoreZapFull" | bc)
        #   echo "::notice:: Totals ‚Äî Critical=$CRITICAL High=$HIGH Medium=$MEDIUM Low=$LOW Score=$score"
        #   if (( $(echo "$score > 10" | bc -l) )); then
        #     echo "‚ùå Deployment blocked: Weighted risk score $score exceeds threshold."
        #   else
        #     echo "‚úÖ All risk checks passed. Total score: $score"
        #   fi

    
        # } || true
        # echo "---------------------------------------"

        # echo ""
        # echo "---------------------------------------"
        # echo "üìä Parsing ZAP API Scan..."
        # jq -c '.site[].alerts[]' zap-reports/zap-api-report.json | {
        #   while read -r alert; do
        #     name=$(echo "$alert" | jq -r '.alert')
        #     riskcode=$(echo "$alert" | jq -r '.riskcode')
        #     confidence=$(echo "$alert" | jq -r '.confidence')
        #     url=$(echo "$alert" | jq -r '.instances[0].uri')
  
        #     echo "Alert: $name"
        #     echo "Risk: $riskcode"
        #     echo "Confidence: $confidence"
        #     echo "URL: $url"
  
        #     case "$riskcode" in
        #       3) sev=5; ((CRITICAL++)) ;;
        #       2) sev=3; ((HIGH++)) ;;
        #       1) sev=2; ((MEDIUM++)) ;;
        #       0) sev=1; ((LOW++)) ;;
        #       *) sev=0; ;;
        #     esac
  
        #     coef=$(map_confidence "$confidence")
        #     vuln_score=$(echo "$sev * $coef" | bc)
        #     score=$(echo "$score + $vuln_score" | bc)
  
        #     echo "- [ZAP API] $name @ $url | severity=$sev confidence=$confidence -> $vuln_score"
        #     echo "----------------------"
        #   done
        #   echo "$score" > scoreZapAPI.txt
        #   printf "Critical: $CRITICAL \n" >> zapAPIList.txt
        #   printf "High: $HIGH \n" >> zapAPIList.txt
        #   printf "Medium: $MEDIUM \n" >> zapAPIList.txt
        #   printf "Low: $LOW \n" >> zapAPIList.txt

        #   scoreZapAPI=$(cat scoreZapAPI.txt)
        #   score=$(echo "$score + $scoreZapAPI" | bc)
        #   echo "::notice:: Totals ‚Äî Critical=$CRITICAL High=$HIGH Medium=$MEDIUM Low=$LOW Score=$score"
        #   if (( $(echo "$score > 10" | bc -l) )); then
        #     echo "‚ùå Deployment blocked: Weighted risk score $score exceeds threshold."
        #   else
        #     echo "‚úÖ All risk checks passed. Total score: $score"
        #   fi
        # } || true
      

        # echo ""
        # echo "---------------------------------------"

        # echo "üìä Including Nuclei (assumed confidence=1.0)"
        # if [[ -f scan-reports/nuclei.txt ]]; then
        #   while IFS= read -r line; do
        #     case "$line" in
        #       *"severity: critical"*) sev=5; ((CRITICAL++)) ;;
        #       *"severity: high"*) sev=3; ((HIGH++)) ;;
        #       *"severity: medium"*) sev=2; ((MEDIUM++)) ;;
        #       *"severity: low"*) sev=1; ((LOW++)) ;;
        #       *) sev=0 ;;
        #     esac
        #     vuln_score=$sev
        #     score=$(echo "$score + $vuln_score" | bc)
        #     echo "- [Nuclei] $line -> $vuln_score"
        #   done < scan-reports/nuclei.txt
        #   touch nucleiscore.txt
        #   echo "$score" > nucleiscore.txt
        # fi
        # echo "---------------------------------------"
        
        # echo ""
        # echo "---------------------------------------"

        # echo "üìä Parsing Nikto (weighted scoring by finding type)..."
        # if [[ -f scan-reports/nikto.txt ]]; then
        #   while IFS= read -r line; do
        #     score_delta=0
        #     case "$line" in
        #       *"OSVDB"* | *"CVE"* )
        #         score_delta=4
        #         ((CRITICAL++))
        #         ;;
        #       *"Server leaks"* | *"Internal IP"* )
        #         score_delta=3
        #         ((HIGH++))
        #         ;;
        #       *"Potentially dangerous"* | *"directory indexing"* )
        #         score_delta=2
        #         ((MEDIUM++))
        #         ;;
        #       *"Outdated"* | *"Deprecated"* )
        #         score_delta=1
        #         ((LOW++))
        #         ;;
        #       *)
        #         score_delta=0
        #         ;;
        #     esac

        #     score=$(echo "$score + $score_delta" | bc)
        #     echo "- [Nikto] $line -> $score_delta"
        #   done < scan-reports/nikto.txt
        #   touch niktoscore.txt
        #   echo "$score" > niktoscore.txt
        #   printf "Critical: $CRITICAL \n" >> niktoList.txt
        #   printf "High: $HIGH \n" >> niktoList.txt
        #   printf "Medium: $MEDIUM \n" >> niktoList.txt
        #   printf "Low: $LOW \n" >> niktoList.txt

        #   scoreNikto=$(cat niktoscore.txt)
        #   score=$(echo "$score + $scoreNikto" | bc)
        #   echo "::notice:: Totals ‚Äî Critical=$CRITICAL High=$HIGH Medium=$MEDIUM Low=$LOW Score=$score"
        #   if (( $(echo "$score > 10" | bc -l) )); then
        #     echo "‚ùå Deployment blocked: Weighted risk score $score exceeds threshold."
        #   else
        #     echo "‚úÖ All risk checks passed. Total score: $score"
        #   fi
        # fi
        # echo "---------------------------------------"

        echo "üîç Bandit Findings (evaluated per issue)..."
        HIGH=0
        MEDIUM=0
        LOW=0
        score=0
        echo "Debug 1"
        cat scan-reports/bandit.json
        if [[ -f scan-reports/bandit.json ]]; then
          echo "Debug 2"
          while read -r finding; do
            sev=0
            echo "Debug 3"
            severity=$(echo "$finding" | jq -r '.issue_severity // "empty"') || severity="UNKNOWN"
            file=$(echo "$finding" | jq -r '.filename // empty') || file="UNKNOWN"
            line_number=$(echo "$finding" | jq -r '.line_number // 0') || line_number=0
            issue_text=$(echo "$finding" | jq -r '.issue_text // "No Description"') || issue_text="(missing)"
            echo "Debug 4"
            echo "$severity"
            echo "$file"
            echo "$line_number"
            echo "$issue_text"
            case $(echo "$severity") in
              "HIGH") sev=3; echo "case1"; ((HIGH++)) ;;
              "MEDIUM") sev=2; echo "case2"; ((MEDIUM++)) ;;
              "LOW") sev=1; echo "case3"; ((LOW++)) ;;
              *) sev=0 ;;
            esac
            echo "Debug 5"
            score=$(echo "$score + $sev" | bc)
            echo "Debug 6"
            echo "- [Bandit] $severity in $file:$line_number ‚Äî $issue_text -> $vuln_score"
          done < <(jq -c '.results[]' scan-reports/bandit.json)
          echo "Debug 7"
          echo "::notice:: Bandit Evaluation ‚Äî High=$HIGH Medium=$MEDIUM Low=$LOW Score=$score"
        else
          echo "‚ö†Ô∏è Bandit report not found."
        fi

        echo ""
        echo "---------------------------------------"

        echo "üìä Semgrep Findings (evaluated per issue)..."
        HIGH=0
        MEDIUM=0
        LOW=0
        score=0

        map_confidence_semgrep() {
          case "$1" in
            "HIGH") echo 1.0 ;;
            "MEDIUM") echo 0.8 ;;
            "LOW") echo 0.5 ;;
            *) echo 0.0 ;;
          esac
        }

        if [[ -f scan-reports/semgrep.json ]]; then
          while read -r finding; do
            severity=$(echo "$finding" | jq -r '.extra.severity // "INFO"')
            confidence=$(echo "$finding" | jq -r '.extra.metadata.confidence // "LOW"')
            file=$(echo "$finding" | jq -r '.path')
            start_line=$(echo "$finding" | jq -r '.start.line')
            message=$(echo "$finding" | jq -r '.extra.message // .message')

            case "$severity" in
              "ERROR") sev=3; ((HIGH++)) ;;
              "WARNING") sev=2; ((MEDIUM++)) ;;
              "INFO") sev=1; ((LOW++)) ;;
              *) sev=0 ;;
            esac

            coef=$(map_confidence_semgrep "$confidence")
            vuln_score=$(echo "$sev * $coef" | bc)
            score=$(echo "$score + $vuln_score" | bc)

            echo "- [Semgrep] in $file:$start_line ‚Äî $message"
            echo "  Severity: $severity | Confidence: $confidence -> Score: $vuln_score"
          done < <(jq -c '.results[]' scan-reports/semgrep.json)

          echo "::notice:: Semgrep Evaluation ‚Äî High=$HIGH Medium=$MEDIUM Low=$LOW Score=$score"
        else
          echo "‚ö†Ô∏è Semgrep report not found."
        fi

        echo "---------------------------------------"



        


  deploy-to-prod:
    runs-on: ubuntu-latest
    needs: risk-evalutaion
    if: success()

    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull the evaluated image (optional, if needed)
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/flask-webapp:latest || true

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/flask-webapp:latest

      - name: Trigger Render Deployment
        run: |
          echo "üì¶ Deployment request sent to Render..."
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}
