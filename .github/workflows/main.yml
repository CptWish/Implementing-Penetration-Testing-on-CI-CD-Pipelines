name: CI/CD Pipeline with Testing and Scanning

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        cd webApp
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run unit tests (pytest)
      run: |
        cd webApp
        pytest

    - name: Build and tag Docker image
      run: |
        cd webApp
        docker build -t ${{ secrets.DOCKER_USERNAME }}/flask-webapp:latest .

  Static-Code-Analysis:
    runs-on: ubuntu-latest
    needs: build-test  

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Semgrep and Bandit
      run: |
        pip install semgrep bandit

    - name: Run Semgrep
      run: |
        semgrep --config p/default webApp || true

    - name: Run Bandit (Python security linter)
      run: |
        bandit -r webApp -lll --exit-zero

  post-deployment-pentesting:
    runs-on: ubuntu-latest
    needs: build-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Docker dependencies and build image
      run: |
        cd webApp
        docker build -t flask-webapp .

    - name: Create Docker network
      run: docker network create zapnet

    - name: Run Flask app container
      run: |
        docker run --network zapnet -d --name pentest-target flask-webapp
        sleep 10

    - name: Confirm Flask app is reachable inside zapnet
      run: |
        docker run --rm --network zapnet curlimages/curl curl -s http://pentest-target:5000 || (echo "App not reachable!" && exit 1)

    - name: Install SecLists Wordlist
      run: |
        mkdir -p ${{ github.workspace }}/wordlists
        curl -sSL https://raw.githubusercontent.com/danielmiessler/SecLists/refs/heads/master/Discovery/Web-Content/directory-list-2.3-small.txt -o ${{ github.workspace }}/wordlists/fuzzlist.txt

    - name: Run directory fuzzing with ffuf (Docker)
      run: |
        docker run --rm --network zapnet \
        -v ${{ github.workspace }}/wordlists:/wordlists \
        -v ${{ github.workspace }}/scan-reports:/ffuf/output \
        secsi/ffuf \
        -u http://pentest-target:5000/FUZZ \
        -w /wordlists/fuzzlist.txt \
        -mc 200,302 \
        -s \
        -o /ffuf/output/ffuf.json \
        -of json || true

    - name: Extract paths from ffuf output
      run: |
        sudo chmod -R 777 scan-reports
        jq -r '.results[].input | "http://pentest-target:5000" + .FUZZ' scan-reports/ffuf.json > scan-reports/urls.txt

    - name: Run nuclei scan (in Docker)
      run: |
        docker run --rm --network zapnet \
          -v ${{ github.workspace }}/scan-reports:/output \
          projectdiscovery/nuclei:latest \
          -l /output/urls.txt \
          -severity critical,high,medium,low,info \
          -o /output/nuclei.txt || true

    - name: Prepare ZAP report directory
      run: |
        mkdir -p zap-reports
        sudo chmod -R 777 zap-reports

    - name: Run ZAP Full Scan (Crawl + Attack)
      run: |
        docker run --rm --network zapnet \
          -v ${{ github.workspace }}/zap-reports:/zap/wrk \
          -t ghcr.io/zaproxy/zaproxy:stable zap-full-scan.py \
          -t http://pentest-target:5000 \
          -J zap-full-report.json -r zap-full-report.html || true

    - name: Run ZAP API Scan
      run: |
        docker run --rm --network zapnet \
          -v ${{ github.workspace }}/zap-reports:/zap/wrk \
          -t ghcr.io/zaproxy/zaproxy:stable zap-api-scan.py \
          -t http://pentest-target:5000/openapi.json \
          -f openapi \
          -d \
          -a \
          -J zap-api-report.json -r zap-api-report.html || true

    - name: Evaluate scan results
      run: |
        echo "Evaluating vulnerabilities..."
         ZAP_CRIT=$(jq '[.site[0].alerts[] | select(.riskcode=="3")] | length' zap-reports/zap-api-report.json)
        NUCLEI_CRIT=$(grep -ic 'critical' scan-reports/nuclei.txt || true)

        echo "ZAP critical: $ZAP_CRIT"
        echo "Nuclei critical: $NUCLEI_CRIT"

        if [ "$ZAP_CRIT" -gt 0 ] || [ "$NUCLEI_CRIT" -gt 0 ]; then
          echo "❌ Critical vulnerabilities found. Aborting push and deploy."
          exit 1
        fi
        echo "✅ No critical vulnerabilities. Proceeding with deploy."

    - name: Stop and remove app container
      if: always()
      run: |
        docker stop pentest-target
        docker rm pentest-target

    - name: Remove Docker network
      if: always()
      run: docker network rm zapnet

  deploy:
    runs-on: ubuntu-latest
    needs: post-deployment-pentesting
    if: success()

    steps:
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/flask-webapp:latest

    - name: Deploy to Render
      run: |
        curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}
