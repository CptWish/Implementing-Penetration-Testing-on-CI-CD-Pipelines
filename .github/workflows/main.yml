name: CI/CD Pipeline with Testing and Scanning

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        cd webApp
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run unit tests (pytest)
      run: |
        cd webApp
        pytest

    # - name: Build and tag Docker image
    #   run: |
    #     cd webApp
    #     docker build -t ${{ secrets.DOCKER_USERNAME }}/flask-webapp:latest .

  Static-Code-Analysis:
    runs-on: ubuntu-latest
    needs: build-test  

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Semgrep and Bandit
      run: |
        pip install semgrep bandit

    - name: Run Semgrep (JSON report)
      run: |
        mkdir -p scan-reports
        semgrep --config p/default webApp --json > scan-reports/semgrep.json || true

    - name: Upload Semgrep results as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: semgrep
        path: scan-reports/semgrep.json

    - name: Run Bandit (JSON report)
      run: |
        mkdir -p scan-reports
        bandit -r webApp -f json -o scan-reports/bandit.json || true

    - name: Upload Bandit results as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: bandit
        path: scan-reports/bandit.json
  
  
  
  post-deployment-pentesting:
    runs-on: ubuntu-latest
    needs: build-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Docker dependencies and build image
      run: |
        cd webApp
        docker build -t flask-webapp .

    - name: Create Docker network
      run: docker network create zapnet

    - name: Run Flask app container
      run: |
        docker run --network zapnet -d --name pentest-target flask-webapp
        sleep 10

    - name: Confirm Flask app is reachable inside zapnet
      run: |
        docker run --rm --network zapnet curlimages/curl curl -s http://pentest-target:5000 || (echo "App not reachable!" && exit 1)

    - name: Install SecLists Wordlist
      run: |
        mkdir -p ${{ github.workspace }}/wordlists
        curl -sSL https://raw.githubusercontent.com/danielmiessler/SecLists/refs/heads/master/Discovery/Web-Content/directory-list-2.3-small.txt -o ${{ github.workspace }}/wordlists/fuzzlist.txt
    
    - name: Run directory fuzzing with ffuf (Docker)
      run: |
        docker run --rm --network zapnet \
        -v ${{ github.workspace }}/wordlists:/wordlists \
        -v ${{ github.workspace }}/scan-reports:/ffuf/output \
        secsi/ffuf \
        -u http://pentest-target:5000/FUZZ \
        -w /wordlists/fuzzlist.txt \
        -mc 200,302 \
        -s \
        -o /ffuf/output/ffuf.json \
        -of json || true

    - name: Extract paths from ffuf output (cleaned)
      run: |
        sudo chmod -R 777 scan-reports
        echo "http://pentest-target:5000/" > scan-reports/urls.txt
        jq -r '.results[].input | "http://pentest-target:5000/" + .FUZZ' scan-reports/ffuf.json > scan-reports/urls_unmodified.txt
        sed -i '/#/d' scan-reports/urls_unmodified.txt
        sort scan-reports/urls_unmodified.txt | uniq > scan-reports/urls.txt
        cat scan-reports/urls.txt

    # - name: Run nuclei scan (in Docker)
    #   run: |
    #     mkdir -p scan-reports/nuclei-individual
    #     while IFS= read -r url; do
    #       echo " "
    #       echo " "
    #       echo "üîç Scanning $url with Nuclei..."
    #       docker run --rm --network zapnet \
    #         -v ${{ github.workspace }}/scan-reports:/output \
    #         projectdiscovery/nuclei:latest \
    #         -u "$url" \
    #         -severity critical,high,medium,low,info \
    #         -c 100 \
    #         -o "/output/nuclei-individual/$(echo $url | md5sum | cut -d' ' -f1).txt" || true
    #     done < scan-reports/urls.txt


    # - name: Merge Nuclei individual reports
    #   run: |
    #     mkdir -p scan-reports
    #     echo "üîó Merging Nuclei individual reports into scan-reports/nuclei.txt"
    #     cat scan-reports/nuclei-individual/*.txt > scan-reports/nuclei.txt || echo "No individual reports found."    

    - name: Prepare ZAP report directory
      run: |
        mkdir -p zap-reports
        sudo chmod -R 777 zap-reports

    - name: Run ZAP Full Scan (Crawl + Attack)
      run: |
        mkdir -p zap-reports/temp
        echo '{"site":[]}' > zap-reports/zap-full-report.json

        while IFS= read -r url; do
          echo "üîç Scanning $url with ZAP Full Scan..."
          HASH=$(echo $url | md5sum | cut -d' ' -f1)
          JSON_FILE="zap-full-report-$HASH.json"
          HTML_FILE="zap-full-report-$HASH.html"

          docker run --rm --network zapnet \
            -v ${{ github.workspace }}/zap-reports:/zap/wrk \
            -t ghcr.io/zaproxy/zaproxy:stable zap-full-scan.py \
            -t "$url" \
            -J "$JSON_FILE" \
            -r "$HTML_FILE" || true
        done < scan-reports/urls.txt
  
    - name: Merge ZAP Full Scan reports
      run: |
        echo '{"site": []}' > zap-reports/zap-full-report.json
        for f in zap-reports/zap-full-report-*.json; do
          if [ -f "$f" ]; then
            jq -s '.[0].site + .[1].site | {site: .}' "$f" zap-reports/zap-full-report.json > zap-reports/tmp.json && mv zap-reports/tmp.json zap-reports/zap-full-report.json
          fi
        done


    - name: Run ZAP API Scan
      run: |
        docker run --rm --network zapnet \
          -v ${{ github.workspace }}/zap-reports:/zap/wrk \
          -t ghcr.io/zaproxy/zaproxy:stable zap-api-scan.py \
          -t http://pentest-target:5000/openapi.json \
          -f openapi \
          -d \
          -a \
          -J zap-api-report.json -r zap-api-report.html || true

    # - name: Upload nuclei artifact
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: nuclei
    #     path: scan-reports/nuclei.txt

    - name: Upload ZAP-full artifact
      uses: actions/upload-artifact@v4
      with:
        name: zap-full
        path: zap-reports/zap-full-report.json

    - name: Upload ZAP-api artifact
      uses: actions/upload-artifact@v4
      with:
        name: zap-api
        path: zap-reports/zap-api-report.json

    - name: Stop and remove app container
      if: always()
      run: |
        docker stop pentest-target
        docker rm pentest-target

    - name: Remove Docker network
      if: always()
      run: docker network rm zapnet
    
  risk-evalutaion:
    runs-on: ubuntu-latest
    needs: [post-deployment-pentesting, Static-Code-Analysis]
    if: success()

    steps:
    - name: Download Semgrep SCA artifacts
      uses: actions/download-artifact@v4
      with:
        name: semgrep
        
    - name: Download Bandit SCA artifacts
      uses: actions/download-artifact@v4
      with:
        name: bandit

    - name: Get ZAP full results from post-deployment-pentesting job
      uses: actions/download-artifact@v4
      with:
        name: zap-full

    - name: Get ZAP API results from post-deployment-pentesting job
      uses: actions/download-artifact@v4
      with:
        name: zap-api

    # - name: Get Nuclei results from post-deployment-pentesting job
    #   uses: actions/download-artifact@v4
    #   with:
    #     name: nuclei

    - name: Move artifacts to scan-reports directory
      run: |
        mkdir scan-reports
        mv semgrep.json scan-reports/
        mv bandit.json scan-reports/
        # mv nuclei.txt scan-reports/
        mkdir zap-reports
        mv zap-api-report.json zap-reports/
        mv zap-full-report.json zap-reports/


    - name: test
      run: |

        score=0
        CRITICAL=0
        HIGH=0
        MEDIUM=0
        LOW=0

        map_confidence() {

          case "$1" in
            "0") echo "0.0" ;;
            "1") echo "0.5" ;;
            "2") echo "0.8" ;;
            "3") echo "1.0" ;;
            *) echo "0.0" ;;
          esac
        }

        echo "üìä Parsing ZAP Full Scan..."
        while read -r alert; do
          name=$(echo "$alert" | jq -r '.alert')
          riskcode=$(echo "$alert" | jq -r '.riskcode')
          confidence=$(echo "$alert" | jq -r '.confidence')
          url=$(echo "$alert" | jq -r '.url')

          echo "Alert: $name"
          echo "Risk: $riskcode"
          echo "Confidence: $confidence"
          echo "URL: $url"

          case "$riskcode" in
            3) sev=5; ((CRITICAL++)) ;;
            2) sev=3; ((HIGH++)) ;;
            1) sev=2; ((MEDIUM++)) ;;
            0) sev=1; ((LOW++)) ;;
            *) sev=0; ;;
          esac

          coef=$(map_confidence "$confidence")
          vuln_score=$(echo "$sev * $coef" | bc)
          score=$(echo "$score + $vuln_score" | bc)

          echo "- [ZAP Full] $name @ $url | severity=$sev confidence=$confidence -> $vuln_score"

          echo "----------------------"
        done < <(jq -c '.site[].alerts[]' zap-reports/zap-full-report.json)


        echo "üìä Parsing ZAP API Scan..."
        while read -r alert; do
          name=$(echo "$alert" | jq -r '.alert')
          riskcode=$(echo "$alert" | jq -r '.riskcode')
          confidence=$(echo "$alert" | jq -r '.confidence')
          url=$(echo "$alert" | jq -r '.url')

          echo "Alert: $name"
          echo "Risk: $riskcode"
          echo "Confidence: $confidence"
          echo "URL: $url"

          case "$riskcode" in
            3) sev=5; ((CRITICAL++)) ;;
            2) sev=3; ((HIGH++)) ;;
            1) sev=2; ((MEDIUM++)) ;;
            0) sev=1; ((LOW++)) ;;
            *) sev=0; ;;
          esac

          coef=$(map_confidence "$confidence")
          vuln_score=$(echo "$sev * $coef" | bc)
          score=$(echo "$score + $vuln_score" | bc)

          echo "- [ZAP API] $name @ $url | severity=$sev confidence=$confidence -> $vuln_score"
          echo "$score"

          echo "----------------------"
        done < <(jq -c '.site[].alerts[]' zap-reports/zap-api-report.json)

        echo "üìä Including Nuclei (assumed confidence=1.0)"
        if [[ -f scan-reports/nuclei.txt ]]; then
          while IFS= read -r line; do
            case "$line" in
              *"severity: critical"*) sev=5; ((CRITICAL++)) ;;
              *"severity: high"*) sev=3; ((HIGH++)) ;;
              *"severity: medium"*) sev=2; ((MEDIUM++)) ;;
              *"severity: low"*) sev=1; ((LOW++)) ;;
              *) sev=0 ;;
            esac
            vuln_score=$sev
            score=$(echo "$score + $vuln_score" | bc)
            echo "- [Nuclei] $line -> $vuln_score"
          done < scan-reports/nuclei.txt
        fi

        echo "üìä Bandit and Semgrep (assumed confidence=1.0)"
        BANDIT_HIGH=$( { jq '[.results[] | select(.issue_severity=="HIGH")] | length' scan-reports/bandit.json 2>/dev/null || echo 0; } )
        BANDIT_MEDIUM=$( { jq '[.results[] | select(.issue_severity=="MEDIUM")] | length' scan-reports/bandit.json 2>/dev/null || echo 0; } )
        BANDIT_LOW=$( { jq '[.results[] | select(.issue_severity=="LOW")] | length' scan-reports/bandit.json 2>/dev/null || echo 0; } )

        SEMGREP_HIGH=$( { jq '[.results[] | select(.severity=="ERROR")] | length' scan-reports/semgrep.json 2>/dev/null || echo 0; } )
        SEMGREP_MEDIUM=$( { jq '[.results[] | select(.severity=="WARNING")] | length' scan-reports/semgrep.json 2>/dev/null || echo 0; } )
        SEMGREP_LOW=$( { jq '[.results[] | select(.severity=="INFO")] | length' scan-reports/semgrep.json 2>/dev/null || echo 0; } )

        # Function to safely loop over a count
        safe_loop() {
          local count=$1
          local weight=$2
          local label=$3

          if [[ "$count" =~ ^[0-9]+$ ]]; then
            for i in $(seq 1 "$count"); do
              score=$(echo "$score + $weight" | bc)
            done
          fi
        }

        # Apply scoring
        safe_loop "$BANDIT_HIGH" 3 HIGH
        safe_loop "$BANDIT_MEDIUM" 2 MEDIUM
        safe_loop "$BANDIT_LOW" 1 LOW

        safe_loop "$SEMGREP_HIGH" 3 HIGH
        safe_loop "$SEMGREP_MEDIUM" 2 MEDIUM
        safe_loop "$SEMGREP_LOW" 1 LOW

        echo ""
        echo "::notice:: Totals ‚Äî Critical=$CRITICAL High=$HIGH Medium=$MEDIUM Low=$LOW Score=$score"

        if (( $(echo "$score > 10" | bc -l) )); then
          echo "‚ùå Deployment blocked: Weighted risk score $score exceeds threshold."
          exit 1
        fi

        echo "‚úÖ All risk checks passed. Total score: $score"

    # - name: Evaluate vulnerabilities (Threshold + Weighted)
    #   run: |
    #     echo "üîç Evaluating vulnerabilities using threshold and weighted models..."

    #     # Parse ZAP reports
    #     ZAP_API_CRIT=$(jq '[.site[0].alerts[] | select(.riskcode=="3")] | length' zap-reports/zap-api-report.json || echo 0)
    #     ZAP_API_HIGH=$(jq '[.site[0].alerts[] | select(.riskcode=="2")] | length' zap-reports/zap-api-report.json || echo 0)
    #     ZAP_API_MED=$(jq '[.site[0].alerts[] | select(.riskcode=="1")] | length' zap-reports/zap-api-report.json || echo 0)
    #     ZAP_API_LOW=$(jq '[.site[0].alerts[] | select(.riskcode=="0")] | length' zap-reports/zap-api-report.json || echo 0)

    #     ZAP_FULL_CRIT=$(jq '[.site[0].alerts[] | select(.riskcode=="3")] | length' zap-reports/zap-full-report.json || echo 0)
    #     ZAP_FULL_HIGH=$(jq '[.site[0].alerts[] | select(.riskcode=="2")] | length' zap-reports/zap-full-report.json || echo 0)
    #     ZAP_FULL_MED=$(jq '[.site[0].alerts[] | select(.riskcode=="1")] | length' zap-reports/zap-full-report.json || echo 0)
    #     ZAP_FULL_LOW=$(jq '[.site[0].alerts[] | select(.riskcode=="0")] | length' zap-reports/zap-full-report.json || echo 0)

    #     # Add ZAP totals
    #     CRITICAL=$((ZAP_API_CRIT + ZAP_FULL_CRIT))
    #     HIGH=$((ZAP_API_HIGH + ZAP_FULL_HIGH))
    #     MEDIUM=$((ZAP_API_MED + ZAP_FULL_MED))
    #     LOW=$((ZAP_API_LOW + ZAP_FULL_LOW))

    #     # Parse Nuclei results
    #     NUCLEI_CRITICAL=$(grep -ic 'severity.*critical' scan-reports/nuclei.txt || echo 0)
    #     NUCLEI_HIGH=$(grep -ic 'severity.*high' scan-reports/nuclei.txt || echo 0)
    #     NUCLEI_MEDIUM=$(grep -ic 'severity.*medium' scan-reports/nuclei.txt || echo 0)
    #     NUCLEI_LOW=$(grep -ic 'severity.*low' scan-reports/nuclei.txt || echo 0)

    #     CRITICAL=$((CRITICAL + NUCLEI_CRITICAL))
    #     HIGH=$((HIGH + NUCLEI_HIGH))
    #     MEDIUM=$((MEDIUM + NUCLEI_MEDIUM))
    #     LOW=$((LOW + NUCLEI_LOW))

    #     echo "Critical: $CRITICAL"
    #     echo "High: $HIGH"
    #     echo "Medium: $MEDIUM"
    #     echo "Low: $LOW"

    #     # Parse Bandit and Semgrep
    #     BANDIT_HIGH=$(jq '[.results[] | select(.issue_severity=="HIGH")] | length' scan-reports/bandit.json || echo 0)
    #     BANDIT_MEDIUM=$(jq '[.results[] | select(.issue_severity=="MEDIUM")] | length' scan-reports/bandit.json || echo 0)
    #     BANDIT_LOW=$(jq '[.results[] | select(.issue_severity=="LOW")] | length' scan-reports/bandit.json || echo 0)

    #     SEMGREP_HIGH=$(jq '[.results[] | select(.severity=="ERROR")] | length' scan-reports/semgrep.json || echo 0)
    #     SEMGREP_MEDIUM=$(jq '[.results[] | select(.severity=="WARNING")] | length' scan-reports/semgrep.json || echo 0)
    #     SEMGREP_LOW=$(jq '[.results[] | select(.severity=="INFO")] | length' scan-reports/semgrep.json || echo 0)

    #     HIGH=$((HIGH + BANDIT_HIGH + SEMGREP_HIGH))
    #     MEDIUM=$((MEDIUM + BANDIT_MEDIUM + SEMGREP_MEDIUM))
    #     LOW=$((LOW + BANDIT_LOW + SEMGREP_LOW))

    #     echo "Final Totals:"
    #     echo "::notice::Critical=$CRITICAL High=$HIGH Medium=$MEDIUM Low=$LOW"
    #     echo ""
    #     echo "üîé ZAP Full Scan Critical Findings:"
    #     jq -r '.site[0].alerts[] | select(.riskcode=="3") | "- \(.alert): \(.url)"' zap-reports/zap-full-report.json || echo "None"

    #     echo ""
    #     echo "üîé ZAP API Scan Critical Findings:"
    #     jq -r '.site[0].alerts[] | select(.riskcode=="3") | "- \(.alert): \(.url)"' zap-reports/zap-api-report.json || echo "None"

    #     echo ""
    #     echo "üîé Nuclei Critical Findings:"
    #     grep -i 'severity.*critical' scan-reports/nuclei.txt || echo "None"

    #     echo ""


    #     # Threshold check
    #     if [ "$CRITICAL" -gt 0 ]; then
    #       echo "‚ùå Blocked: Critical vulnerabilities present."
    #       exit 1
    #     fi
    #     if [ "$HIGH" -gt 2 ]; then
    #       echo "‚ùå Blocked: Too many High vulnerabilities."
    #       exit 1
    #     fi
    #     if [ "$MEDIUM" -gt 4 ]; then
    #       echo "‚ùå Blocked: Too many Medium vulnerabilities."
    #       exit 1
    #     fi

    #     # Weighted scoring
    #     SCORE=$((CRITICAL*5 + HIGH*3 + MEDIUM*2 + LOW))
    #     echo "Weighted Risk Score: $SCORE"

    #     if [ "$SCORE" -gt 10 ]; then
    #       echo "‚ùå Blocked: Risk score too high."
    #       exit 1
    #     fi

    #     echo "‚úÖ Risk evaluation passed. Safe to proceed."


  deploy-to-prod:
    runs-on: ubuntu-latest
    needs: risk-evalutaion
    if: success()

    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull the evaluated image (optional, if needed)
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/flask-webapp:latest || true

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/flask-webapp:latest

      - name: Trigger Render Deployment
        run: |
          echo "üì¶ Deployment request sent to Render..."
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}
